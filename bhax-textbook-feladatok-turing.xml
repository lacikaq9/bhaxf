<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/lvmi6tyz-nI">https://youtu.be/lvmi6tyz-nI</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/infty-f.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/infty-f.c</filename>
            </link>, 
            <link xlink:href="Turing/infty-w.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/infty-w.c</filename>
            </link>.
        </para>
        <para>
            Rengetek fajta végtelen ciklus van.
            Szükség van rájuk pár fontosabb feladatban mint mondjuk egy szerveren akarunk állapotfolyamatokat 
			lementeni es csinalunk egy végtelenciklust es beleirjuk hogy mentse le a szerver allapotat + sleep 
			mondjuk 5 percig maskor meg bugok felvedzése vagy maga a végtelen ciklus a bugos.
        </para>                    
        <para>
            Egy mag 100 százalékban:               
        </para>
        <programlisting language="c"><![CDATA[int
main ()
{
  for (;;);

  return 0;
}
]]>
        </programlisting>        
        <para>        
        még egy csak mert mért ne
        </para>
        <programlisting language="c"><![CDATA[int
#include <stdbool.h>
main ()
{
  while(true);

  return 0;
}
]]>
        </programlisting>        
		<para>
		    Ajánlott a for(;;) formát használni mert az minden c verzióba lefut és ha valaki más olvassa a programodat
			akkor látja hogy végtelen ciklust akartál és nem csak elirtad.Érdekesség hogy a fordító a while-t és for-t 
			ugyanúgy fordítja.
		</para>
        <para>
            Egy mag 0 százalékban:               
        </para>        
        <programlisting language="c"><![CDATA[#include <unistd.h>
int
main ()
{
  for (;;)
    sleep(1);
    
  return 0;
}
]]>
        </programlisting>        
        <para>
            Minden mag 100 százalékban:               
        </para>

        <programlisting language="c"><![CDATA[#include <omp.h>
int
main ()
{
#pragma omp parallel
{
  for (;;);
}
  return 0;
}
]]>
        </programlisting>        
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
		<para>
			A feladatnak nincs megoldása mert: ha a program tartalmaz végtelen ciklus akkor lefagy = true
			és akkor lefagy2 is true lesz ha meg a programban nincs végtelen ciklus akkor lefagy = false és akkor
			lefagy 2 egy végtelen ciklussá alakul át.
		</para>
    </section>        
                
    <section>
			<title>Változók értékének felcserélése</title>
			<para>
				Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
				nasználata nélkül!
			</para>
			<para>
				Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
			</para>
		 <para>
				<programlisting language="c">
					<![CDATA[
				#include <stdio.h>

	int main()
	{
		int a = 2;
		int b = 1;

		b = b-a;
		a = a+b;
		b = a-b;

		printf(a);
		printf(b);
		return 0;
	}
	]]>
	</programlisting>
			</para>

			<para>
				Megoldás forrása:  
			</para>
			<para>
				E feladat megoldása véleményem szerint egyértelmű.
			</para>
		</section>                                   

    <section>
			<title>Labdapattogás</title>
			<para>
				Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
				nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
				pattogtatás alatt, alább láthatod a videókon.)
			</para>
			<para>
				Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
			</para>
			<para>
			<programlisting language="c">
					<![CDATA[  
		#include <stdio.h>
	#include <stdlib.h>

	char bitzero(char x) {
		int i;
		char bitt = x&0x1;
		for (i=0; i<8; i++) {
			bitt |= (x>>i)&1;
		}
		return 1-bitt;
	}

	void rajzol(char width, char height) {
		int i;
		/*magasság*/
		for (i=1; i<=height; i++) {
			printf("\n");
		}
		/*szélesség*/
		for (i=1; i<=width; i++) {
			printf(" ");
		}
		printf("O\n");
	}

	int main() {
		char x=1, y=1, vx=1, vy=1;
		while(1) {
			system("clear");
			vx-=2*bitzero(79-x);    //balra pattanjon
			vx+=2*bitzero(x);       //
			vy-=2*bitzero(24-y);    //lefele
			vy+=2*bitzero(y);       //
			x+=vx;
			y+=vy;
			//printf("X: %d Y: %d \n", x, y);              //Koordináták
			//printf("Vx: %d Vy: %d", vx, vy);             //Velocity
			rajzol(x,y);
			usleep(100000);
		} 
		return 0;
	}
			]]>
		</programlisting>

			</para>
			<para>
				Tanulságok, tapasztalatok, magyarázat...
				Egy alap program amiben a terminálban egy "o" betűt pattogtat while ciklussal.
			</para>
		</section>                                       

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link>, 
            <link xlink:href="https://youtu.be/KRZlt1ZJ3qk">https://youtu.be/KRZlt1ZJ3qk</link>, 
            <link xlink:href=""></link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/bogomips.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Turing/bogomips.c</filename>
            </link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... 
        </para>
		<para>
			MIPS az egy rövidétes teljes valójába Millions of Instructions Per Second ami annyit tesz ki milliónyi utasítások/másodperc.
			Múködése mögött a titok hogy van egy ciklus amit úgy kalibrál be a program hogy folyamatosan menjen bármi féle akadás nélkül
			es ezzel a processor sebességéhez igazodik.
		</para>
        <para>
				<programlisting language="c">
					<![CDATA[
			#include <time.h>
	#include <stdio.h>

	void
	delay (unsigned long long loops)
	{
	  for (unsigned long long i = 0; i < loops; i++);
	}

	int
	main (void)
	{
	  unsigned long long loops_per_sec = 1;
	  unsigned long long ticks;

	  printf ("Calibrating delay loop..");
	  fflush (stdout);

	  while ((loops_per_sec <<= 1))
		{
		  ticks = clock ();
		  delay (loops_per_sec);
		  ticks = clock () - ticks;

		  if (ticks >= CLOCKS_PER_SEC)
		{
		  loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

		  printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
			  (loops_per_sec / 5000) % 100);

		  return 0;
		}
		}

	  printf ("failed\n");
	  return -1;
	}
			]]>
		</programlisting>
		</para>
    </section>                     

    <section>
			<title>Helló, Google!</title>
			<para>
				Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
				értékét!
			</para>
			<para>
				Megoldás videó: <link xlink:href=""></link>
			</para>
			<para>
				Megoldás forrása: <link xlink:href=""></link>
			</para>
			<para>
				Tanulságok, tapasztalatok, magyarázat...
				A PageRank képlete: PR(A) = (1-d) + d (PR(T1)/C(T1) + ... + PR(Tn)/C(Tn))
				A: az aktuális oldal
				T: oldalak amik az a-ra hoz vannak linkelve
				PR(A): a oldal pagerank száma
				PR(Tn): azok oldalak pagerank száma amik az a-ra mutatnak
				C(Tn): t oldalon az összes link ami a-ra mutatnak
				d: 0 és 1 közé esik

			</para>
			<programlisting language="c"> <![CDATA[
				#include <stdio.h>
	#include <math.h>

	void
	kiir (double tomb[], int db){
		
		int i;
		
		for (i=0; i<db; ++i){
			printf("%f\n",tomb[i]);
		}
	}

	double
	tavolsag (double PR[], double PRv[], int n){
		
		int i;
		double osszeg=0;
		
		for (i = 0; i < n; ++i)
			osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);
		
		return sqrt(osszeg);
	}

	void
	pagerank(double T[4][4]){
		double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
		double PRv[4] = { 1.0/4.0, 1.0/4.0, 1.0/4.0, 1.0/4.0};
		
		int i, j;
		
		for(;;){
			
			for (i=0; i<4; i++){
				PR[i]=0.0;
				for (j=0; j<4; j++){
					PR[i] = PR[i] + T[i][j]*PRv[j];
				}
			}
		
				if (tavolsag(PR,PRv,4) < 0.0000000001) 
					break;
			
				for (i=0;i<4; i++){
					PRv[i]=PR[i];
				}	
		}
		
		kiir (PR, 4);
	}

	int main (void){
		double L[4][4] = {
			{0.0,  0.0,      1.0/3.0,  0.0},
			{1.0,  1.0/2.0,  1.0/3.0,  1.0},
			{0.0,  1.0/2.0,  0.0,      0.0},
			{0.0,  0.0, 	 1.0/3.0,  0.0}
		};	
		
		double L1[4][4] = {
			{0.0,  0.0,      1.0/3.0,  0.0},
			{1.0,  1.0/2.0,  1.0/3.0,  0.0},
			{0.0,  1.0/2.0,  0.0,      0.0},
			{0.0,  0.0, 	 1.0/3.0,  0.0}
		};
		
		double L2[4][4] = {
			{0.0,  0.0,      1.0/3.0,  0.0},
			{1.0,  1.0/2.0,  1.0/3.0,  0.0},
			{0.0,  1.0/2.0,  0.0,      0.0},
			{0.0,  0.0, 	 1.0/3.0,  1.0}
		};
		
		printf("\nAz eredeti mátrix értékeivel történő futás:\n");
		pagerank(L);
		
		printf("\nAmikor az egyik oldal semmire sem mutat:\n");
		pagerank(L1);
		
		printf("\nAmikor az egyik oldal csak magára mutat:\n");
		pagerank(L2);
		
		printf("\n");

		return 0;
	}
	]]>
			</programlisting>
		</section>
                                                                                                                                                                                                                                                                                                                                                        
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
			<title>A Monty Hall probléma</title>
			<para>
				Írj R szimulációt a Monty Hall problémára!
			</para>
			<para>
				Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
			</para>
			<para>
				Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
			</para>
			<para>
				A program véletlen eseteket generál. Meghatározzuk a kísérletek számat majd a játékos vektorban véletlenszerüen megadjuk mit választ esetenkent. A vektorok mérete a kisérletek számával egyenlő.
			</para>
			<para>
				Egy for ciklussal végigmegyünk a kisérletek száman és megnézzuk hogy eltalálta-e az eredményt.
			   Ha nem találta el, a műsorvezető kap pontot.
			   Ha nyer, kiértékeljuk hogy hányszor nyert volna változtatás nélkül. Egyéb esetekben változtatással nyert volna.  
				Megszámoljuk a vektorokon az eseményeket majd kiiratjuk az eredményeket..
			</para>
		</section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>

        <para>
            A természetes számok építőelemei a prímszámok. Abban az értelemben, 
            hogy minden természetes szám előállítható prímszámok szorzataként.
            Például 12=2*2*3, vagy például 33=3*11.
        </para>
        <para>
            Prímszám az a természetes szám, amely csak önmagával és eggyel 
            osztható. Eukleidész görög matematikus már Krisztus előtt tudta, 
            hogy végtelen sok prímszám van, de ma sem tudja senki, hogy 
            végtelen sok ikerprím van-e. Két prím ikerprím, ha különbségük 2.
        </para>
        <para>
            Két egymást követő páratlan prím között a legkisebb távolság a 2, 
            a legnagyobb távolság viszont bármilyen nagy lehet! Ez utóbbit 
            könnyű bebizonyítani. Legyen n egy tetszőlegesen nagy szám. 
            Akkor szorozzuk össze n+1-ig a számokat, azaz számoljuk ki az 
            1*2*3*… *(n-1)*n*(n+1) szorzatot, aminek a neve (n+1) faktoriális, 
            jele (n+1)!.
        </para>
        <para>
            Majd vizsgáljuk meg az a sorozatot:
        </para>    
        <para>
            (n+1)!+2, (n+1)!+3,… , (n+1)!+n, (n+1)!+ (n+1) ez n db egymást követő azám, ezekre (a jól ismert
            bizonyítás szerint) rendre igaz, hogy            
        </para>    
        <itemizedlist>
            <listitem>
                <para>(n+1)!+2=1*2*3*… *(n-1)*n*(n+1)+2, azaz 2*valamennyi+2, 2 többszöröse, így ami osztható kettővel</para>
            </listitem>
            <listitem>
                <para>(n+1)!+3=1*2*3*… *(n-1)*n*(n+1)+3, azaz 3*valamennyi+3, ami osztható hárommal</para>
            </listitem>
            <listitem>
                <para>...</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n-1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n-1)*valamennyi+(n-1), ami osztható (n-1)-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+n=1*2*3*… *(n-1)*n*(n+1)+n, azaz n*valamennyi+n-, ami osztható n-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n+1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n+1)*valamennyi+(n+1), ami osztható (n+1)-el</para>
            </listitem>
        </itemizedlist>
        <para>
            tehát ebben a sorozatban egy prim nincs, akkor a (n+1)!+2-nél 
            kisebb első prim és a (n+1)!+ (n+1)-nél nagyobb első 
            prim között a távolság legalább n.            
        </para>    
        <para>
            Az ikerprímszám sejtés azzal foglalkozik, amikor a prímek közötti 
            távolság 2. Azt mondja, hogy az egymástól 2 távolságra lévő prímek
            végtelen sokan vannak.
        </para>    
        <para>
            A Brun tétel azt mondja, hogy az ikerprímszámok reciprokaiból képzett sor összege, azaz
            a (1/3+1/5)+ (1/5+1/7)+ (1/11+1/13)+... véges vagy végtelen sor konvergens, ami azt jelenti, hogy ezek
            a törtek összeadva egy határt adnak ki pontosan vagy azt át nem lépve növekednek, 
            ami határ számot B<subscript>2</subscript> Brun konstansnak neveznek. Tehát ez
            nem dönti el a több ezer éve nyitott kérdést, hogy az ikerprímszámok halmaza végtelen-e? 
            Hiszen ha véges sok van és ezek
            reciprokait összeadjuk, akkor ugyanúgy nem lépjük át a B<subscript>2</subscript> Brun konstans értékét, 
            mintha végtelen 
            sok lenne, de ezek már csak olyan csökkenő mértékben járulnának hozzá a végtelen sor összegéhez, 
            hogy így sem lépnék át a Brun konstans értékét.     
        </para>
        <para>
            Ebben a példában egy olyan programot készítettünk, amely közelíteni próbálja a Brun konstans értékét.
            A repó <link xlink:href="../../../bhax/attention_raising/Primek_R/stp.r">
                <filename>bhax/attention_raising/Primek_R/stp.r</filename>
            </link> mevű állománya kiszámolja az ikerprímeket, összegzi
            a reciprokaikat és vizualizálja a kapott részeredményt.
        </para>
        <programlisting language="R">
<![CDATA[#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
]]>
        </programlisting>        
        <para>
            Soronként értelemezzük ezt a programot:
        </para>                
        <programlisting language="R">
<![CDATA[ primes = primes(13)]]>
        </programlisting>        
        <para>
            Kiszámolja a megadott számig a prímeket.             
        </para>
        <screen>
<![CDATA[> primes=primes(13)
> primes
[1]  2  3  5  7 11 13
]]>
        </screen>
                
        <programlisting language="R">
<![CDATA[ diff = primes[2:length(primes)]-primes[1:length(primes)-1]]]>
        </programlisting>        
        <screen>
<![CDATA[> diff = primes[2:length(primes)]-primes[1:length(primes)-1]
> diff
[1] 1 2 2 4 2
]]>
        </screen>        
        <para>
            Az egymást követő prímek különbségét képzi, tehát 3-2, 5-3, 7-5, 11-7, 13-11.
        </para>
        <programlisting language="R">
<![CDATA[idx = which(diff==2)]]>
        </programlisting>        
        <screen>
<![CDATA[> idx = which(diff==2)
> idx
[1] 2 3 5
]]>
        </screen>              
        <para>
            Megnézi a <varname>diff</varname>-ben, hogy melyiknél lett kettő az eredmény, mert azok az ikerprím párok, ahol ez igaz.
            Ez a <varname>diff</varname>-ben lévő 3-2, 5-3, 7-5, 11-7, 13-11 külünbségek közül ez a 2., 3. és 5. indexűre teljesül.
        </para>
        <programlisting language="R">
<![CDATA[t1primes = primes[idx]]]>
        </programlisting>  
        <para>
            Kivette a primes-ból a párok első tagját. 
        </para>
        <programlisting language="R">
<![CDATA[t2primes = primes[idx]+2]]>
        </programlisting>        
        <para>
            A párok második tagját az első tagok kettő hozzáadásával képezzük.
        </para>
        <programlisting language="R">
<![CDATA[rt1plust2 = 1/t1primes+1/t2primes]]>
        </programlisting>        
        <para>
            Az 1/t1primes a t1primes 3,5,11 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t1primes
[1] 0.33333333 0.20000000 0.09090909
]]>
        </screen>                      
        <para>
            Az 1/t2primes a t2primes 5,7,13 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t2primes
[1] 0.20000000 0.14285714 0.07692308
]]>
        </screen>                      
        <para>
            Az 1/t1primes + 1/t2primes pedig ezeket a törteket rendre összeadja.
        </para>
        <screen>
<![CDATA[> 1/t1primes+1/t2primes
[1] 0.5333333 0.3428571 0.1678322
]]>
        </screen>                      
        <para>
            Nincs más dolgunk, mint ezeket a törteket összeadni a 
            <function>sum</function> függvénnyel.
        </para>
        
        <programlisting language="R">
<![CDATA[sum(rt1plust2)]]>
        </programlisting>    
        <screen>
<![CDATA[>   sum(rt1plust2)
[1] 1.044023
]]>
        </screen>            
        <para>
            A következő ábra azt mutatja, hogy a szumma értéke, hogyan nő, egy határértékhez tart, a 
            B<subscript>2</subscript> Brun konstanshoz. Ezt ezzel a csipettel rajzoltuk ki, ahol először a fenti 
            számítást 13-ig végezzük, majd 10013, majd 20013-ig, egészen 990013-ig, azaz közel 1 millióig.
            Vegyük észre, hogy az ábra első köre, a 13 értékhez tartozó 1.044023.
        </para>
        <programlisting language="R">
<![CDATA[x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")]]>
        </programlisting>          
        <figure>
            <title>A B<subscript>2</subscript> konstans közelítése</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/BrunKorok.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A B<subscript>2</subscript> konstans közelítése</phrase>
                </textobject>
            </mediaobject>
        </figure>                             
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/VkMFrgBhN1g">https://youtu.be/VkMFrgBhN1g</link>
                    </para>    
                </listitem>                
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/aF4YK6mBwf4">https://youtu.be/aF4YK6mBwf4</link>
                    </para>    
                </listitem>                
            </itemizedlist>                
        </tip>
    </section>

</chapter>
