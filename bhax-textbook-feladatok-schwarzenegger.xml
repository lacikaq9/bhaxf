<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Szoftmax Py MNIST</title>
        <para>
            Python
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:            
        </para>
        <para>
             a felépités és a futtatása: https://www.youtube.com/watch?v=wQ8BIBpya2k
        </para>
        <para>
            a környezet felépitése windowsban: https://github.com/jeffheaton/t81_558_deep_learning Amerikai deep learning tanár
        </para>
        <para>
            Az MNIST egy olyan program ami a Tensorflow alapot használja. A tensorflow egy mesterséges intelegenciához használt
            dolog gyakorlatilag a tensorflow keras segitsegevel probal szimulalni egy emberi agyat amelynek sajet neuralis halozata
            van amivel sajat magat tudja tanitani.Ebben a feladatban a program azt tanulja meg hogy vannak kezzelirt szamok 0-9 ig 
            es a gep feladat hogy egyre nagyobb pontosságal eltalálja. Minél több ideig engedjük futtatni a programot egyre pontosabb 
            lesz a számok felismerésével
        </para>
        <para>
            A feladatot windowson oldottam meg ennek a telepitese: Elsönek is szükségünk van egy python alapra ha ez nincs meg en a minicondat javaslom
            mert nem tart sok ideig a telepitese es könyu hasznalni ha ezt megtettuk.A windows keresosavba be kell irnunk annaconda command promt
            es ebben a command promt-ban telepitunk mar fontos dolgot
        </para>
        <para>
            conda install jupyter,
            conda install scipy,
pip install --upgrade sklearn,
pip install --upgrade pandas,
pip install --upgrade pandas-datareader,
pip install --upgrade matplotlib,
pip install --upgrade pillow,
pip install --upgrade requests,
pip install --upgrade h5py,
pip install --upgrade pyyaml,
pip install --upgrade psutil,
pip install --upgrade tensorflow,
pip install --upgrade keras,
        </para>
        <para>
            Ha ezekkal megvagyunk az anaconda promtba beirjuk hogy jupyter notebook
            ez letrehoz egy miniwebservert es egy virtualis feluletet a munkahoz
        </para>
        <para>A program tensorflowal és keras-al</para>
        <programlisting>
            <![CDATA[
            
import tensorflow as tf  # deep learning library. Tensors are just multi-dimensional arrays | itt hivjuk be a tensorflowot tf neven

mnist = tf.keras.datasets.mnist  # mnist is a dataset of 28x28 images of handwritten digits and their labels | mnist maga az adatbázis amibe 28x28 kepek vannak
(x_train, y_train),(x_test, y_test) = mnist.load_data()  # unpacks images to x_train/x_test and labels to y_train/y_test | kicsomagoljuk a kepeket

x_train = tf.keras.utils.normalize(x_train, axis=1)  # scales data between 0 and 1 | szamokat atalitjuk 0-255 rol 0-1 ig
x_test = tf.keras.utils.normalize(x_test, axis=1)  # scales data between 0 and 1 | szamokat atalitjuk 0-255 rol 0-1 ig

model = tf.keras.models.Sequential()  # a basic feed-forward model | ez a "taplalasi mód"
model.add(tf.keras.layers.Flatten())  # takes our 28x28 and makes it 1x784 | ezzel kilapositjuk ad adatforrast 28x28 rol 1x784
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))  # a simple fully-connected layer, 128 units, relu activation
model.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))  # a simple fully-connected layer, 128 units, relu activation
model.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))  # our output layer. 10 units for 10 classes. Softmax for probability distribution

model.compile(optimizer='adam',  # Good default optimizer to start with
              loss='sparse_categorical_crossentropy',  # how will we calculate our "error." Neural network aims to minimize loss.
              metrics=['accuracy'])  # what to track

model.fit(x_train, y_train, epochs=3)  # train the model | ezzek kezdjuk a tanulast

val_loss, val_acc = model.evaluate(x_test, y_test)  # evaluate the out of sample data with model | a hiba % szamoljuk ezzel
print(val_loss)  # model's loss (error) | hiba érték
print(val_acc)  # model's accuracy | pontossag értéke
            ]]>
            
        </programlisting>
        <para>Pythonban</para>
        <programlisting><![CDATA[
        # Copyright 2015 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

"""Builds the MNIST network.
Implements the inference/loss/training pattern for model building.
1. inference() - Builds the model as far as required for running the network
forward to make predictions.
2. loss() - Adds to the inference model the layers required to generate loss.
3. training() - Adds to the loss model the Ops required to generate and
apply gradients.
This file is used by the various "fully_connected_*.py" files and not meant to
be run.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import math

import tensorflow as tf

# The MNIST dataset has 10 classes, representing the digits 0 through 9.
NUM_CLASSES = 10

# The MNIST images are always 28x28 pixels.
IMAGE_SIZE = 28
IMAGE_PIXELS = IMAGE_SIZE * IMAGE_SIZE


def inference(images, hidden1_units, hidden2_units):
  """Build the MNIST model up to where it may be used for inference.
  Args:
    images: Images placeholder, from inputs().
    hidden1_units: Size of the first hidden layer.
    hidden2_units: Size of the second hidden layer.
  Returns:
    softmax_linear: Output tensor with the computed logits.
  """
  # Hidden 1
  with tf.name_scope('hidden1'):
    weights = tf.Variable(
        tf.truncated_normal([IMAGE_PIXELS, hidden1_units],
                            stddev=1.0 / math.sqrt(float(IMAGE_PIXELS))),
        name='weights')
    biases = tf.Variable(tf.zeros([hidden1_units]),
                         name='biases')
    hidden1 = tf.nn.relu(tf.matmul(images, weights) + biases)
  # Hidden 2
  with tf.name_scope('hidden2'):
    weights = tf.Variable(
        tf.truncated_normal([hidden1_units, hidden2_units],
                            stddev=1.0 / math.sqrt(float(hidden1_units))),
        name='weights')
    biases = tf.Variable(tf.zeros([hidden2_units]),
                         name='biases')
    hidden2 = tf.nn.relu(tf.matmul(hidden1, weights) + biases)
  # Linear
  with tf.name_scope('softmax_linear'):
    weights = tf.Variable(
        tf.truncated_normal([hidden2_units, NUM_CLASSES],
                            stddev=1.0 / math.sqrt(float(hidden2_units))),
        name='weights')
    biases = tf.Variable(tf.zeros([NUM_CLASSES]),
                         name='biases')
    logits = tf.matmul(hidden2, weights) + biases
  return logits


def loss(logits, labels):
  """Calculates the loss from the logits and the labels.
  Args:
    logits: Logits tensor, float - [batch_size, NUM_CLASSES].
    labels: Labels tensor, int32 - [batch_size].
  Returns:
    loss: Loss tensor of type float.
  """
  labels = tf.to_int64(labels)
  return tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)


def training(loss, learning_rate):
  """Sets up the training Ops.
  Creates a summarizer to track the loss over time in TensorBoard.
  Creates an optimizer and applies the gradients to all trainable variables.
  The Op returned by this function is what must be passed to the
  `sess.run()` call to cause the model to train.
  Args:
    loss: Loss tensor, from loss().
    learning_rate: The learning rate to use for gradient descent.
  Returns:
    train_op: The Op for training.
  """
  # Add a scalar summary for the snapshot loss.
  tf.summary.scalar('loss', loss)
  # Create the gradient descent optimizer with the given learning rate.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate)
  # Create a variable to track the global step.
  global_step = tf.Variable(0, name='global_step', trainable=False)
  # Use the optimizer to apply the gradients that minimize the loss
  # (and also increment the global step counter) as a single training step.
  train_op = optimizer.minimize(loss, global_step=global_step)
  return train_op


def evaluation(logits, labels):
  """Evaluate the quality of the logits at predicting the label.
  Args:
    logits: Logits tensor, float - [batch_size, NUM_CLASSES].
    labels: Labels tensor, int32 - [batch_size], with values in the
      range [0, NUM_CLASSES).
  Returns:
    A scalar int32 tensor with the number of examples (out of batch_size)
    that were predicted correctly.
  """
  # For a classifier model, we can use the in_top_k Op.
  # It returns a bool tensor with shape [batch_size] that is true for
  # the examples where the label is in the top k (here k=1)
  # of all logits for that example.
  correct = tf.nn.in_top_k(logits, labels, 1)
  # Return the number of true entries.
  return tf.reduce_sum(tf.cast(correct, tf.int32))
        ]]></programlisting>
        <para>
            Az adatbázis
        </para>
                <mediaobject>
		<imageobject>
        <imagedata fileref="img/kep1.png" scale="30" />
        </imageobject>
		</mediaobject>
        <para>
            Egy szamrol valo kep
        </para>
                <mediaobject>
		<imageobject>
        <imagedata fileref="img/kep2.png" scale="30" />
        </imageobject>
		</mediaobject>
        <para>
            A training
        </para>
        <mediaobject>
		<imageobject>
        <imagedata fileref="img/kep3.png" scale="30" />
        </imageobject>
		</mediaobject>
    </section>        

    <section>
        <title>Szoftmax R MNIST</title>
        <para>
            R            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        

    <section>
        <title>Mély MNIST</title>
        <para>
            Python            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
           A mély MNIST ugyanolyan mint az MNIST csak traning közbe jobban javul a pontossága és létrehoz egy gráfot a fejlődéséről amit nekem a
            C:\Users\asus\AppData\Local\Temp\ mappában teszi sajnos arra nem jöttem rá hogyis nyissam meg ezt a fájlt de legalább megvan.
        </para>
        <para>
            A feladat amúgy nagyon megdolgoztatja a gépet mint a screenshotomról is látható hogy a 4 magos 8 szálas gépemen 100% -osan leterheli és a
            memóiát is nagyon szereti
        </para>
        <programlisting>
            <![CDATA[
Extracting /tmp/tensorflow/mnist/input_data\train-images-idx3-ubyte.gz
Extracting /tmp/tensorflow/mnist/input_data\train-labels-idx1-ubyte.gz
Extracting /tmp/tensorflow/mnist/input_data\t10k-images-idx3-ubyte.gz
Extracting /tmp/tensorflow/mnist/input_data\t10k-labels-idx1-ubyte.gz
Saving graph to: C:\Users\asus\AppData\Local\Temp\tmpopltx9xf
step 0, training accuracy 0.04
step 100, training accuracy 0.9
step 200, training accuracy 0.86
step 300, training accuracy 0.94
step 400, training accuracy 0.9
step 500, training accuracy 0.98
step 600, training accuracy 0.96
step 700, training accuracy 0.94
step 800, training accuracy 0.94
step 900, training accuracy 1
step 1000, training accuracy 1
step 1100, training accuracy 0.96
step 1200, training accuracy 0.98
step 1300, training accuracy 0.94
step 1400, training accuracy 0.96
step 1500, training accuracy 0.96
step 1600, training accuracy 0.94
step 1700, training accuracy 1
step 1800, training accuracy 1
step 1900, training accuracy 0.98
step 2000, training accuracy 0.98
step 2100, training accuracy 0.98
step 2200, training accuracy 0.98
step 2300, training accuracy 0.98
step 2400, training accuracy 0.98
step 2500, training accuracy 0.98
step 2600, training accuracy 0.98
step 2700, training accuracy 0.96
step 2800, training accuracy 1
step 2900, training accuracy 1
step 3000, training accuracy 1
step 3100, training accuracy 0.94
step 3200, training accuracy 1
step 3300, training accuracy 1
step 3400, training accuracy 0.94
step 3500, training accuracy 0.98
step 3600, training accuracy 1
step 3700, training accuracy 0.98
step 3800, training accuracy 0.94
step 3900, training accuracy 0.9
step 4000, training accuracy 0.98
step 4100, training accuracy 0.98
step 4200, training accuracy 1
step 4300, training accuracy 0.96
step 4400, training accuracy 1
]]>
        </programlisting>
        <programlisting language="python"> 
            <![CDATA[
                # Copyright 2015 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

"""A deep MNIST classifier using convolutional layers.
See extensive documentation at
https://www.tensorflow.org/get_started/mnist/pros
"""
# Disable linter warnings to maintain consistency with tutorial.
# pylint: disable=invalid-name
# pylint: disable=g-bad-import-order

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse
import sys
import tempfile

from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf

FLAGS = None


def deepnn(x):
  """deepnn builds the graph for a deep net for classifying digits.
  Args:
    x: an input tensor with the dimensions (N_examples, 784), where 784 is the
    number of pixels in a standard MNIST image.
  Returns:
    A tuple (y, keep_prob). y is a tensor of shape (N_examples, 10), with values
    equal to the logits of classifying the digit into one of 10 classes (the
    digits 0-9). keep_prob is a scalar placeholder for the probability of
    dropout.
  """
  # Reshape to use within a convolutional neural net.
  # Last dimension is for "features" - there is only one here, since images are
  # grayscale -- it would be 3 for an RGB image, 4 for RGBA, etc.
  with tf.name_scope('reshape'):
    x_image = tf.reshape(x, [-1, 28, 28, 1])

  # First convolutional layer - maps one grayscale image to 32 feature maps.
  with tf.name_scope('conv1'):
    W_conv1 = weight_variable([5, 5, 1, 32])
    b_conv1 = bias_variable([32])
    h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)

  # Pooling layer - downsamples by 2X.
  with tf.name_scope('pool1'):
    h_pool1 = max_pool_2x2(h_conv1)

  # Second convolutional layer -- maps 32 feature maps to 64.
  with tf.name_scope('conv2'):
    W_conv2 = weight_variable([5, 5, 32, 64])
    b_conv2 = bias_variable([64])
    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)

  # Second pooling layer.
  with tf.name_scope('pool2'):
    h_pool2 = max_pool_2x2(h_conv2)

  # Fully connected layer 1 -- after 2 round of downsampling, our 28x28 image
  # is down to 7x7x64 feature maps -- maps this to 1024 features.
  with tf.name_scope('fc1'):
    W_fc1 = weight_variable([7 * 7 * 64, 1024])
    b_fc1 = bias_variable([1024])

    h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])
    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

  # Dropout - controls the complexity of the model, prevents co-adaptation of
  # features.
  with tf.name_scope('dropout'):
    keep_prob = tf.placeholder(tf.float32)
    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)

  # Map the 1024 features to 10 classes, one for each digit
  with tf.name_scope('fc2'):
    W_fc2 = weight_variable([1024, 10])
    b_fc2 = bias_variable([10])

    y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2
  return y_conv, keep_prob


def conv2d(x, W):
  """conv2d returns a 2d convolution layer with full stride."""
  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')


def max_pool_2x2(x):
  """max_pool_2x2 downsamples a feature map by 2X."""
  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],
                        strides=[1, 2, 2, 1], padding='SAME')


def weight_variable(shape):
  """weight_variable generates a weight variable of a given shape."""
  initial = tf.truncated_normal(shape, stddev=0.1)
  return tf.Variable(initial)


def bias_variable(shape):
  """bias_variable generates a bias variable of a given shape."""
  initial = tf.constant(0.1, shape=shape)
  return tf.Variable(initial)


def main(_):
  # Import data
  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)

  # Create the model
  x = tf.placeholder(tf.float32, [None, 784])

  # Define loss and optimizer
  y_ = tf.placeholder(tf.float32, [None, 10])

  # Build the graph for the deep net
  y_conv, keep_prob = deepnn(x)

  with tf.name_scope('loss'):
    cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=y_,
                                                            logits=y_conv)
  cross_entropy = tf.reduce_mean(cross_entropy)

  with tf.name_scope('adam_optimizer'):
    train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

  with tf.name_scope('accuracy'):
    correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))
    correct_prediction = tf.cast(correct_prediction, tf.float32)
  accuracy = tf.reduce_mean(correct_prediction)

  graph_location = tempfile.mkdtemp()
  print('Saving graph to: %s' % graph_location)
  train_writer = tf.summary.FileWriter(graph_location)
  train_writer.add_graph(tf.get_default_graph())

  with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(20000):
      batch = mnist.train.next_batch(50)
      if i % 100 == 0:
        train_accuracy = accuracy.eval(feed_dict={
            x: batch[0], y_: batch[1], keep_prob: 1.0})
        print('step %d, training accuracy %g' % (i, train_accuracy))
      train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})

    print('test accuracy %g' % accuracy.eval(feed_dict={
        x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str,
                      default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS, unparsed = parser.parse_known_args()
  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
            ]]>
        </programlisting>
        <para></para>
                <mediaobject>
		<imageobject>
        <imagedata fileref="img/kep4.png" scale="50" />
        </imageobject>
		</mediaobject>
        <para></para>
        <mediaobject>
		<imageobject>
        <imagedata fileref="img/kep5.png" scale="60" />
        </imageobject>
		</mediaobject>
    </section>        

    <section>
        <title>Deep dream</title>
        <para>
            Keras            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
                  
    <section>
        <title>Minecraft-MALMÖ</title>
        <para>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Minecraft MALMO egy minecraft amibe lehet pyhton c, c++, és java kóddal irányítani a karaktert es alakítani a világot főleg AI fejlesztésre használják. Ezeken
            kívül készíthtünk mission-öket az elobb felsorolt programozasi nyelveken.
        </para>
        <para>Windows-on való telepítése:</para>
        <para>Előszer 3 dolog kell: JDK 8.0 telepítése ,Python 3.6 telepít, zip letöltése és kicsomagolása</para>
        <para>2 módszer van a letöltésre</para>
        <para>Githubról letöltjük az egész mappát</para>
        <para>Vagy powershellbe bizonyos parancsokkal</para>
        <para>2-es módszernél telepítéséhez ezeket kell beírni</para>
        <programlisting>
            <![CDATA[
            Set-ExecutionPolicy -Scope CurrentUser Unrestricted | Engedélyezzük a powershellnek külsős progok telepítését
            cd ahova kicsomagoltad\Malmo-0.35.6-Windows-64bit_Python3.6\scripts
            .\malmo_install.ps1
            ]]>
        </programlisting>
        <para>Ezzel kész is minecraft elindításához ezt kell beírni</para>
        <programlisting>
            <![CDATA[
            cd ahol ki lett csomagolva\Malmo-0.37.0-Windows-64bit_withBoost_Python3.6\Minecraft
            .\launchclient
            ]]>
        </programlisting>
        <para>Ezzel el is indul a minecraft nem kell várni hogy a számláló 100% üssön 95% már indul és sose éri el a 100-at</para>
        <para>És mondjuk egy missiont akarunk indítani python nyelvben</para>
        <programlisting>
            <![CDATA[
            cd ahol ki lett csomagolva\Malmo-0.37.0-Windows-64bit_withBoost_Python3.6\Python_Examples
            python tutorial_1.py
            ]]>
        </programlisting>
        <para>Ezzel letesz minket a jaték egy szerver alapu világba és 10 másodpercig egyhelyben állunk ennél vannak izgalmasabb küldetések is 
        de csak eddig jutottam</para>
        <para>Pár alap parancs</para>
        <programlisting>
            <![CDATA[
            !! az 1 az truera állítja így folyamatosan csinálja a 0 falsera azzal leállítjuk.
            agent_host.sendCommand("turn -0.5") | fordulás
            agent_host.sendCommand("move 1") | előre mozgás 
            agent_host.sendCommand("jump 1") | ugrás
            agent_host.sendCommand("pitch 1") | sötétség
            time.sleep(1) | alvás
            agent_host.sendCommand("attack 1") | támadás
            ]]>
        </programlisting>

    </section>        

</chapter>                
