<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/lacikaq9/2.fejezet/blob/master/turinggep.cpp">link</link>               
        </para>
			<para>Tanulságok, tapasztalatok, magyarázat...</para>
            <para>Turing gép atyja angol származása Alan Turing matematikus az 1936 évekbe megjelent cikkében már elkezdte a turring gép alapjait.</para>
            <para>Turing a számítógépek fejlesztésének máig tartó folyamatát inditoták el.</para>
            <para>A Turing-gépúgynevezett absztakt automata.</para>
            <para>Létrehozunk egy main fügvényt benne pedig két db int tipusú váltózot az egyik neve b ebben fogom tárolni a számot.</para>
            <para>A másik a számláló aminek már értéke nulla. </para>
            <para>cin parancsal tudjuk eltárolni a b értéket amit a kijelzön adja meg aki programot futatja.</para>
            <para>Cout kiíratunk  mondatokat.Lérte kell hozni egy forciklust ami anyiszor fog lefutni ahány értéket megadtunk a b váltózoban.</para>
            <para>cout kirtunk 1 -eseket és megszámlojuk b értéket és ha 5 egyes van akkor tesz egy szóközt a program. </para>
            <para>A program végén pedig ki íratjuk az egyeseket.</para>
            <programlisting>
				<![CDATA[[
				#include <iostream>
using namespace std;

int main()
{
	int b;
	int szamlalo = 0;
	cout<<"Add meg egy decimalis szamot!\n";
	cin >> b;
	cout<<"Unárisban:\n";
	for (int i = 0; i < b; ++i)
	{
		cout<<"1";
		++szamlalo;
		if (szamlalo % 5 == 0) 
		cout<<" ";
	}
	cout<<'\n';
	return 0;
}

				]]>
            </programlisting>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/lacikaq9/2.fejezet/blob/master/k%C3%B6rny.txt">link</link>              
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            A forrásomba van részletezve a feladat.
        </para>
        <programlisting>
            <![CDATA[
                1. pelda

S, X, Y "változók"
a, b, c "konstansok"
S -> abc, S -> aXbc, Xb -> bX, Xc -> Ybcc, bY -> Yb, aY -> aaX, aY -> aa
S-ből indulunk ki
-----------------
S (S -> aXbc)
aXbc (Xb -> bX)
abXc (Xc -> Ybcc)
abYbcc (bY -> Yb)
aYbbcc (aY - aa)
aabbcc
-----------------
S (S -> aXbc)
aXbc (Xb -> bX)
abXc (Xc -> Ybcc)
abYbcc (bY -> Yb)
aYbbcc (aY -> aaX)
aaXbbcc (Xb -> bX)
aabXbcc (Xb -> bX)
aabbXcc (Xc -> Ybcc)
aabbYbccc (bY -> Yb)
aabYbbccc (bY -> Yb)
aaYbbbccc (aY -> aa)
aaabbbccc
            


2. pelda

A, B, C "változók"
a, b, c "konstansok"
A -> aAB, A -> aC, CB -> bCc, cB -> Bc, C -> bc
S-ből indulunk ki
-----------------
A (A -> aAB)
aAB (A -> aC)
aaCB (CB -> bCc)
aabCc (C -> bc)
aabbcc
-----------------
A (A -> aAB)
aAB (A -> aAB)
aaABB (A -> aAB)
aaaABBB (A -> aC)
aaaaCBBB (CB -> bCc)
aaaabCcBB (cB -> Bc)
aaaabCBcB (cB -> Bc)
aaaabCBBc (CB -> bCc)
aaaabbCcBc (cB -> Bc)
aaaabbCBcc (CB -> bCc)
aaaabbbCccc (C -> bc)
aaaabbbbcccc
            ]]>
        </programlisting>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/lacikaq9/2.fejezet/blob/master/c89nem.cpp">link</link>
        </para>
        <para>
            Könyv fogalma:
            A c program nyelv különbséget tesz az utasítások és a definiciók közöt,
            hogy az utasítás csak végrehajtható kódot táról, ezzel szemben a definíció azonosítót generál. 
        </para>
        <para>
			Program nyelveket nem hiába nevezzük "nyelvnek" mert olyan mint egy normális nyelv fejlődik új funkciókat
			tulajdonságokat kap mint ebbe a feladatban is.c89 és a c99 verziók is ilyenek.Ez a példaprogram azért nem fut
			le c89-be mert c99-ben implementálták a kommenteket így c89 nem ismeri fel így hát hibaüzenetet dob be.
		</para>
		<programlisting>
			<![CDATA[[
			#include <stdio.h>

    int main ()
    {
      // Print string to screen.
      printf ("Hello World\n");
        return 0;
    }
			]]>
		</programlisting>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/lacikaq9/2.fejezet/blob/master/lexer.c">link</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            A lexikális elemző feladta,hogy  a forrásnyelvű program lexikális egységeit felismerje, 
            azaz meghatározza a forrásnyelvű kód szimbólumok szövegét és típusát. 
            Az egységek definíciója reguláris kifejezésekel adható meg.
            Fontos hogy nem adható meg Chomsky 3-as nyelvosztállyal mert külön válik.
            A lexer segítségével tudunk lexikális szabályokból elemző kódot csinálni.
            A kód a szamok_szama változóba számolja a számokat. 
            Ahhoz, hogy kiírja a számok számát, a Ctrl+D billentyűkombinációt kell használnunk.
        </para>
        <programlisting>
			<![CDATA[
			#include <string.h>
int szamok_szama = 0;
%}
%%

[0-9]+		++szamok_szama;
[a-zA-Z][a-zA-Z0-9]*	;                          
			
%%
int
main()
{
yylex();
printf("%d szam\n", szamok_szama);
return 0;
			]]>
        </programlisting>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/lacikaq9/2.fejezet/blob/master/l33t.c">link</link>
        </para>
            <para>Tanulságok, tapasztalatok, magyarázat...</para>
            <para>Ezt hackerek/crackerekáltal használt nyelv.</para>
            <para>A program kap egy szöveget melyet l33t tipusu szovegge konvertálja át.</para>
            <para>A program forditasa</para>
			<para>lex -o l337d1c7.c l337d1c7.l</para>
			<para>gcc l337d1c7.c -o l337d1c7 -lfl</para>
			<para>./l337d1c7]|]></para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting> 
                <para>
                 for ciklus ami 0-tól indul 5-ig megy és az i értékét növeli egyel az összes iterációban ezt a ++i prefixnek nevezük.
                </para>           
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>
                <para>
                 for ciklus ami 0-tól indul 5-ig megy és az  i értékét növeli egyel az összes iterációban ezt a i++ postfixnek nevezük. 
                 Ez a külömbség a két csipet között.
                </para>
            
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting> 
                <para>
                 for ciklus ami 0-tól indul 5-ig megy és tomb i-edik elemét felülírja az i++ értékére.
                 De ez a ciklus hibát fog kiadni.
                </para>           
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting> 
                 <para>A  for ciklus 0-tól n-ig fut, majd s-pointer hozzá rendeli  magát d-pointerhez és utána az i értékét egyel növeli.</para>           
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>
                <para>A printf kíratást jelent c nyelven.Itt konkrétan  két db decimális  számértéket iratunk ki .Ez a "%d %d"
                      Utána  f(a, ++a), f(++a, a) fügvények adnak vissza,de a rossz sorrend miatt hibát kapunk.</para>            
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>    
                <para>
                 Kiíratunk két db decimális számértéket az egyiket'f(a)' függvény adja vissza, a másik pedig  az 'a' változo értéke.
                </para>        
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting> 
                <para>
                 Ez ugyanaz mint az elöző csipet a különbség ,hogy az f fügvénynek van referenciája.
                 Kiíratunk két db decimális számértéket az egyiket'f(a)' függvény adja vissza, a másik pedig  az 'a' változo értéke.
                </para>           
            </listitem>
        </orderedlist>
    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$  

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>
           <para>1. Minden számnál van nagyobb prím szám.</para>
           <para>2. Minden számnál létezik nagyobb ikerprím számpáros.</para>
           <para>3. Van olyan szám amelynél minden prím szám kisebb.</para>
           <para>4. Van olyan szám aminél bármely nagyobb szám nem prím.</para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>        
                <para>
                    Egész típusú változó.
                </para>    
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
                <para>
                    Egészre mutató mutató.
                </para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
                <para>
                    Egészre történő referencia.
                </para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
                <para>
                    Egész tömb.
                </para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
                <para>
                    Egész tömbre történő hivatkozás.
                </para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
                <para>
                    Egész tömbre mutató mutató.
                </para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>    
                <para>
                    Egészre mutatót visszaadó függvény.
                </para>        
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
                <para>
                    Egészre mutató mutatót visszaadó függvényre mutató mutató.
                </para>
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>   
                <para>
                    Egészet visszaadó és egészet kapó függvény mutatót visszaadó, két egészet kapó függvény mutató.
                </para>         
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>
                <para>
                    Egészet mutató egészet kapó függvény mutatót visszaadó 2 egészet kapó függvény.
                </para>
            </listitem>            
        </itemizedlist>       
       
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/lacikaq9/2.fejezet/blob/master/valt.cpp">link</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
            A forrasba le vannak irva meglatasaim a feladathoz.
        </para>
    </section>                     


</chapter>                
